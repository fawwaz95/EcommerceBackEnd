"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateHelpers;
var _fs = _interopRequireDefault(require("fs"));
var _path = require("path");
var _url = require("url");
var _terser = require("terser");
// eslint-disable-line import/no-extraneous-dependencies

const HELPERS_FOLDER = new _url.URL("../src/helpers", import.meta.url);
const IGNORED_FILES = new Set(["package.json"]);
async function generateHelpers() {
  let output = `/*
 * This file is auto-generated! Do not modify it directly.
 * To re-generate run 'yarn gulp generate-runtime-helpers'
 */

import template from "@babel/template";

function helper(minVersion: string, source: string) {
  return Object.freeze({
    minVersion,
    ast: () => template.program.ast(source, { preserveComments: true }),
  })
}

export default Object.freeze({
`;
  for (const file of (await _fs.default.promises.readdir(HELPERS_FOLDER)).sort()) {
    if (IGNORED_FILES.has(file)) continue;
    if (file.startsWith(".")) continue; // ignore e.g. vim swap files

    const [helperName] = file.split(".");
    const filePath = (0, _path.join)((0, _url.fileURLToPath)(HELPERS_FOLDER), file);
    if (!file.endsWith(".js")) {
      console.error("ignoring", filePath);
      continue;
    }
    const fileContents = await _fs.default.promises.readFile(filePath, "utf8");
    const minVersionMatch = fileContents.match(/^\s*\/\*\s*@minVersion\s+(?<minVersion>\S+)\s*\*\/\s*$/m);
    if (!minVersionMatch) {
      throw new Error(`@minVersion number missing in ${filePath}`);
    }
    const {
      minVersion
    } = minVersionMatch.groups;
    const source = await (0, _terser.minify)(fileContents, {
      mangle: {
        keep_fnames: true
      },
      // The _typeof helper has a custom directive that we must keep
      compress: {
        directives: false
      }
    });
    output += `\
  ${JSON.stringify(helperName)}: helper(
    ${JSON.stringify(minVersion)},
    ${JSON.stringify(source.code)},
  ),
`;
  }
  output += "});";
  return output;
}