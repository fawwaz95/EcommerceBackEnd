"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userAgentMiddleware = exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = void 0;
var _utilEndpoints = require("@aws-sdk/util-endpoints");
var _protocolHttp = require("@smithy/protocol-http");
var _constants = require("./constants");
const userAgentMiddleware = options => (next, context) => async args => {
  var _context$userAgent, _options$customUserAg;
  const {
    request
  } = args;
  if (!_protocolHttp.HttpRequest.isInstance(request)) return next(args);
  const {
    headers
  } = request;
  const userAgent = (context === null || context === void 0 || (_context$userAgent = context.userAgent) === null || _context$userAgent === void 0 ? void 0 : _context$userAgent.map(escapeUserAgent)) || [];
  const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
  const customUserAgent = (options === null || options === void 0 || (_options$customUserAg = options.customUserAgent) === null || _options$customUserAg === void 0 ? void 0 : _options$customUserAg.map(escapeUserAgent)) || [];
  const prefix = (0, _utilEndpoints.getUserAgentPrefix)();
  const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(_constants.SPACE);
  const normalUAValue = [...defaultUserAgent.filter(section => section.startsWith("aws-sdk-")), ...customUserAgent].join(_constants.SPACE);
  if (options.runtime !== "browser") {
    if (normalUAValue) {
      headers[_constants.X_AMZ_USER_AGENT] = headers[_constants.X_AMZ_USER_AGENT] ? `${headers[_constants.USER_AGENT]} ${normalUAValue}` : normalUAValue;
    }
    headers[_constants.USER_AGENT] = sdkUserAgentValue;
  } else {
    headers[_constants.X_AMZ_USER_AGENT] = sdkUserAgentValue;
  }
  return next({
    ...args,
    request
  });
};
exports.userAgentMiddleware = userAgentMiddleware;
const escapeUserAgent = userAgentPair => {
  var _userAgentPair$;
  const name = userAgentPair[0].split(_constants.UA_NAME_SEPARATOR).map(part => part.replace(_constants.UA_NAME_ESCAPE_REGEX, _constants.UA_ESCAPE_CHAR)).join(_constants.UA_NAME_SEPARATOR);
  const version = (_userAgentPair$ = userAgentPair[1]) === null || _userAgentPair$ === void 0 ? void 0 : _userAgentPair$.replace(_constants.UA_VALUE_ESCAPE_REGEX, _constants.UA_ESCAPE_CHAR);
  const prefixSeparatorIndex = name.indexOf(_constants.UA_NAME_SEPARATOR);
  const prefix = name.substring(0, prefixSeparatorIndex);
  let uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version].filter(item => item && item.length > 0).reduce((acc, item, index) => {
    switch (index) {
      case 0:
        return item;
      case 1:
        return `${acc}/${item}`;
      default:
        return `${acc}#${item}`;
    }
  }, "");
};
const getUserAgentMiddlewareOptions = exports.getUserAgentMiddlewareOptions = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
const getUserAgentPlugin = config => ({
  applyToStack: clientStack => {
    clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
  }
});
exports.getUserAgentPlugin = getUserAgentPlugin;