"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.getHostHeaderPlugin = void 0;
exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
var _protocolHttp = require("@smithy/protocol-http");
function resolveHostHeaderConfig(input) {
  return input;
}
const hostHeaderMiddleware = options => next => async args => {
  if (!_protocolHttp.HttpRequest.isInstance(args.request)) return next(args);
  const {
    request
  } = args;
  const {
    handlerProtocol = ""
  } = options.requestHandler.metadata || {};
  if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
    delete request.headers["host"];
    request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
  } else if (!request.headers["host"]) {
    let host = request.hostname;
    if (request.port != null) host += `:${request.port}`;
    request.headers["host"] = host;
  }
  return next(args);
};
exports.hostHeaderMiddleware = hostHeaderMiddleware;
const hostHeaderMiddlewareOptions = exports.hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
const getHostHeaderPlugin = options => ({
  applyToStack: clientStack => {
    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
  }
});
exports.getHostHeaderPlugin = getHostHeaderPlugin;