"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetRequest = createGetRequest;
exports.getCredentials = getCredentials;
var _propertyProvider = require("@smithy/property-provider");
var _protocolHttp = require("@smithy/protocol-http");
var _smithyClient = require("@smithy/smithy-client");
var _utilStream = require("@smithy/util-stream");
function createGetRequest(url) {
  return new _protocolHttp.HttpRequest({
    protocol: url.protocol,
    hostname: url.hostname,
    port: Number(url.port),
    path: url.pathname,
    query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {
      acc[k] = v;
      return acc;
    }, {}),
    fragment: url.hash
  });
}
async function getCredentials(response) {
  const contentType = (response === null || response === void 0 ? void 0 : response.headers["content-type"]) ?? (response === null || response === void 0 ? void 0 : response.headers["Content-Type"]) ?? "";
  if (!contentType.includes("json")) {
    console.warn("HTTP credential provider response header content-type was not application/json. Observed: " + contentType + ".");
  }
  const stream = (0, _utilStream.sdkStreamMixin)(response.body);
  const str = await stream.transformToString();
  if (response.statusCode === 200) {
    const parsed = JSON.parse(str);
    if (typeof parsed.AccessKeyId !== "string" || typeof parsed.SecretAccessKey !== "string" || typeof parsed.Token !== "string" || typeof parsed.Expiration !== "string") {
      throw new _propertyProvider.CredentialsProviderError("HTTP credential provider response not of the required format, an object matching: " + "{ AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }");
    }
    return {
      accessKeyId: parsed.AccessKeyId,
      secretAccessKey: parsed.SecretAccessKey,
      sessionToken: parsed.Token,
      expiration: (0, _smithyClient.parseRfc3339DateTime)(parsed.Expiration)
    };
  }
  if (response.statusCode >= 400 && response.statusCode < 500) {
    let parsedBody = {};
    try {
      parsedBody = JSON.parse(str);
    } catch (e) {}
    throw Object.assign(new _propertyProvider.CredentialsProviderError(`Server responded with status: ${response.statusCode}`), {
      Code: parsedBody.Code,
      Message: parsedBody.Message
    });
  }
  throw new _propertyProvider.CredentialsProviderError(`Server responded with status: ${response.statusCode}`);
}