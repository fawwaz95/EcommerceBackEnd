"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromHttp = void 0;
var _nodeHttpHandler = require("@smithy/node-http-handler");
var _propertyProvider = require("@smithy/property-provider");
var _promises = _interopRequireDefault(require("fs/promises"));
var _checkUrl = require("./checkUrl");
var _requestHelpers = require("./requestHelpers");
var _retryWrapper = require("./retry-wrapper");
const AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
const DEFAULT_LINK_LOCAL_HOST = "http://169.254.170.2";
const AWS_CONTAINER_CREDENTIALS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
const AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = "AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE";
const AWS_CONTAINER_AUTHORIZATION_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
const fromHttp = options => {
  let host;
  const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];
  const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];
  const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];
  const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];
  if (relative && full) {
    console.warn("AWS SDK HTTP credentials provider:", "you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.");
    console.warn("awsContainerCredentialsFullUri will take precedence.");
  }
  if (token && tokenFile) {
    console.warn("AWS SDK HTTP credentials provider:", "you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.");
    console.warn("awsContainerAuthorizationToken will take precedence.");
  }
  if (full) {
    host = full;
  } else if (relative) {
    host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;
  } else {
    throw new _propertyProvider.CredentialsProviderError("No HTTP credential provider host provided.");
  }
  const url = new URL(host);
  (0, _checkUrl.checkUrl)(url);
  const requestHandler = new _nodeHttpHandler.NodeHttpHandler();
  return (0, _retryWrapper.retryWrapper)(async () => {
    const request = (0, _requestHelpers.createGetRequest)(url);
    if (token) {
      request.headers.Authorization = token;
    } else if (tokenFile) {
      request.headers.Authorization = (await _promises.default.readFile(tokenFile)).toString();
    }
    const result = await requestHandler.handle(request);
    return (0, _requestHelpers.getCredentials)(result.response);
  }, options.maxRetries ?? 3, options.timeout ?? 1000);
};
exports.fromHttp = fromHttp;