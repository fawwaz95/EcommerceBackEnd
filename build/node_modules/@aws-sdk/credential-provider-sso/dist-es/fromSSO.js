"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromSSO = void 0;
var _propertyProvider = require("@smithy/property-provider");
var _sharedIniFileLoader = require("@smithy/shared-ini-file-loader");
var _isSsoProfile = require("./isSsoProfile");
var _resolveSSOCredentials = require("./resolveSSOCredentials");
var _validateSsoProfile = require("./validateSsoProfile");
const fromSSO = (init = {}) => async () => {
  const {
    ssoStartUrl,
    ssoAccountId,
    ssoRegion,
    ssoRoleName,
    ssoClient,
    ssoSession
  } = init;
  const profileName = (0, _sharedIniFileLoader.getProfileName)(init);
  if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
    const profiles = await (0, _sharedIniFileLoader.parseKnownFiles)(init);
    const profile = profiles[profileName];
    if (!profile) {
      throw new _propertyProvider.CredentialsProviderError(`Profile ${profileName} was not found.`);
    }
    if (!(0, _isSsoProfile.isSsoProfile)(profile)) {
      throw new _propertyProvider.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
    }
    if (profile !== null && profile !== void 0 && profile.sso_session) {
      const ssoSessions = await (0, _sharedIniFileLoader.loadSsoSessionData)(init);
      const session = ssoSessions[profile.sso_session];
      const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
      if (ssoRegion && ssoRegion !== session.sso_region) {
        throw new _propertyProvider.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
      }
      if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
        throw new _propertyProvider.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
      }
      profile.sso_region = session.sso_region;
      profile.sso_start_url = session.sso_start_url;
    }
    const {
      sso_start_url,
      sso_account_id,
      sso_region,
      sso_role_name,
      sso_session
    } = (0, _validateSsoProfile.validateSsoProfile)(profile);
    return (0, _resolveSSOCredentials.resolveSSOCredentials)({
      ssoStartUrl: sso_start_url,
      ssoSession: sso_session,
      ssoAccountId: sso_account_id,
      ssoRegion: sso_region,
      ssoRoleName: sso_role_name,
      ssoClient: ssoClient,
      profile: profileName
    });
  } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
    throw new _propertyProvider.CredentialsProviderError("Incomplete configuration. The fromSSO() argument hash must include " + '"ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
  } else {
    return (0, _resolveSSOCredentials.resolveSSOCredentials)({
      ssoStartUrl,
      ssoSession,
      ssoAccountId,
      ssoRegion,
      ssoRoleName,
      ssoClient,
      profile: profileName
    });
  }
};
exports.fromSSO = fromSSO;