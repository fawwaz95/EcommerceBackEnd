"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
var _protocolHttp = require("@smithy/protocol-http");
var _getSkewCorrectedDate = require("./utils/getSkewCorrectedDate");
var _getUpdatedSystemClockOffset = require("./utils/getUpdatedSystemClockOffset");
const awsAuthMiddleware = options => (next, context) => async function (args) {
  var _context$endpointV, _authScheme$signingRe;
  if (!_protocolHttp.HttpRequest.isInstance(args.request)) return next(args);
  const authScheme = (_context$endpointV = context.endpointV2) === null || _context$endpointV === void 0 || (_context$endpointV = _context$endpointV.properties) === null || _context$endpointV === void 0 || (_context$endpointV = _context$endpointV.authSchemes) === null || _context$endpointV === void 0 ? void 0 : _context$endpointV[0];
  const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? authScheme === null || authScheme === void 0 || (_authScheme$signingRe = authScheme.signingRegionSet) === null || _authScheme$signingRe === void 0 ? void 0 : _authScheme$signingRe.join(",") : undefined;
  const signer = await options.signer(authScheme);
  const output = await next({
    ...args,
    request: await signer.sign(args.request, {
      signingDate: (0, _getSkewCorrectedDate.getSkewCorrectedDate)(options.systemClockOffset),
      signingRegion: multiRegionOverride || context["signing_region"],
      signingService: context["signing_service"]
    })
  }).catch(error => {
    const serverTime = error.ServerTime ?? getDateHeader(error.$response);
    if (serverTime) {
      options.systemClockOffset = (0, _getUpdatedSystemClockOffset.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
    }
    throw error;
  });
  const dateHeader = getDateHeader(output.response);
  if (dateHeader) {
    options.systemClockOffset = (0, _getUpdatedSystemClockOffset.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
  }
  return output;
};
exports.awsAuthMiddleware = awsAuthMiddleware;
const getDateHeader = response => {
  var _response$headers, _response$headers2;
  return _protocolHttp.HttpResponse.isInstance(response) ? ((_response$headers = response.headers) === null || _response$headers === void 0 ? void 0 : _response$headers.date) ?? ((_response$headers2 = response.headers) === null || _response$headers2 === void 0 ? void 0 : _response$headers2.Date) : undefined;
};
const awsAuthMiddlewareOptions = exports.awsAuthMiddlewareOptions = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
const getAwsAuthPlugin = options => ({
  applyToStack: clientStack => {
    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
  }
});
exports.getAwsAuthPlugin = getAwsAuthPlugin;
const getSigV4AuthPlugin = exports.getSigV4AuthPlugin = getAwsAuthPlugin;