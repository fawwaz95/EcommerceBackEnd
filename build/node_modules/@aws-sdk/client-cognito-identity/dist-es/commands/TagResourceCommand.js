"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "$Command", {
  enumerable: true,
  get: function () {
    return _smithyClient.Command;
  }
});
exports.TagResourceCommand = void 0;
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _middlewareEndpoint = require("@smithy/middleware-endpoint");
var _middlewareSerde = require("@smithy/middleware-serde");
var _smithyClient = require("@smithy/smithy-client");
var _types = require("@smithy/types");
var _Aws_json1_ = require("../protocols/Aws_json1_1");
class TagResourceCommand extends _smithyClient.Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: {
        type: "builtInParams",
        name: "useFipsEndpoint"
      },
      Endpoint: {
        type: "builtInParams",
        name: "endpoint"
      },
      Region: {
        type: "builtInParams",
        name: "region"
      },
      UseDualStack: {
        type: "builtInParams",
        name: "useDualstackEndpoint"
      }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, TagResourceCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const {
      logger
    } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "TagResourceCommand";
    const handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: _ => _,
      outputFilterSensitiveLog: _ => _,
      [_types.SMITHY_CONTEXT_KEY]: {
        service: "AWSCognitoIdentityService",
        operation: "TagResource"
      }
    };
    const {
      requestHandler
    } = configuration;
    return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return (0, _Aws_json1_.se_TagResourceCommand)(input, context);
  }
  deserialize(output, context) {
    return (0, _Aws_json1_.de_TagResourceCommand)(output, context);
  }
}
exports.TagResourceCommand = TagResourceCommand;