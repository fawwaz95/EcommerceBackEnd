"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRuntimeConfig = void 0;
var _package = _interopRequireDefault(require("../package.json"));
var _sha256Browser = require("@aws-crypto/sha256-browser");
var _utilUserAgentBrowser = require("@aws-sdk/util-user-agent-browser");
var _configResolver = require("@smithy/config-resolver");
var _fetchHttpHandler = require("@smithy/fetch-http-handler");
var _invalidDependency = require("@smithy/invalid-dependency");
var _utilBodyLengthBrowser = require("@smithy/util-body-length-browser");
var _utilRetry = require("@smithy/util-retry");
var _runtimeConfig = require("./runtimeConfig.shared");
var _smithyClient = require("@smithy/smithy-client");
var _utilDefaultsModeBrowser = require("@smithy/util-defaults-mode-browser");
const getRuntimeConfig = config => {
  const defaultsMode = (0, _utilDefaultsModeBrowser.resolveDefaultsModeConfig)(config);
  const defaultConfigProvider = () => defaultsMode().then(_smithyClient.loadConfigsForDefaultMode);
  const clientSharedValues = (0, _runtimeConfig.getRuntimeConfig)(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config === null || config === void 0 ? void 0 : config.bodyLengthChecker) ?? _utilBodyLengthBrowser.calculateBodyLength,
    credentialDefaultProvider: (config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) ?? (_ => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) ?? (0, _utilUserAgentBrowser.defaultUserAgent)({
      serviceId: clientSharedValues.serviceId,
      clientVersion: _package.default.version
    }),
    maxAttempts: (config === null || config === void 0 ? void 0 : config.maxAttempts) ?? _utilRetry.DEFAULT_MAX_ATTEMPTS,
    region: (config === null || config === void 0 ? void 0 : config.region) ?? (0, _invalidDependency.invalidProvider)("Region is missing"),
    requestHandler: (config === null || config === void 0 ? void 0 : config.requestHandler) ?? new _fetchHttpHandler.FetchHttpHandler(defaultConfigProvider),
    retryMode: (config === null || config === void 0 ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || _utilRetry.DEFAULT_RETRY_MODE),
    sha256: (config === null || config === void 0 ? void 0 : config.sha256) ?? _sha256Browser.Sha256,
    streamCollector: (config === null || config === void 0 ? void 0 : config.streamCollector) ?? _fetchHttpHandler.streamCollector,
    useDualstackEndpoint: (config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(_configResolver.DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config === null || config === void 0 ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(_configResolver.DEFAULT_USE_FIPS_ENDPOINT))
  };
};
exports.getRuntimeConfig = getRuntimeConfig;