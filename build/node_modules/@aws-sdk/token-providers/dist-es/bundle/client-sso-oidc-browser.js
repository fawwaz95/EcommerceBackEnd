"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnsupportedGrantTypeException = exports.UnauthorizedClientException = exports.SlowDownException = exports.SSOOIDCClient = exports.InvalidScopeException = exports.InvalidRequestException = exports.InvalidClientException = exports.InternalServerException = exports.ExpiredTokenException = exports.CreateTokenCommand = exports.AuthorizationPendingException = exports.AccessDeniedException = void 0;
var _middlewareHostHeader = require("@aws-sdk/middleware-host-header");
var _middlewareLogger = require("@aws-sdk/middleware-logger");
var _middlewareRecursionDetection = require("@aws-sdk/middleware-recursion-detection");
var _middlewareUserAgent = require("@aws-sdk/middleware-user-agent");
var _configResolver = require("@smithy/config-resolver");
var _middlewareContentLength = require("@smithy/middleware-content-length");
var _middlewareEndpoint = require("@smithy/middleware-endpoint");
var _middlewareRetry = require("@smithy/middleware-retry");
var _smithyClient = require("@smithy/smithy-client");
var _sha256Browser = require("@aws-crypto/sha256-browser");
var _utilUserAgentBrowser = require("@aws-sdk/util-user-agent-browser");
var _fetchHttpHandler = require("@smithy/fetch-http-handler");
var _invalidDependency = require("@smithy/invalid-dependency");
var _utilBodyLengthBrowser = require("@smithy/util-body-length-browser");
var _utilRetry = require("@smithy/util-retry");
var _urlParser = require("@smithy/url-parser");
var _utilBase = require("@smithy/util-base64");
var _utilUtf = require("@smithy/util-utf8");
var _utilEndpoints = require("@aws-sdk/util-endpoints");
var _utilDefaultsModeBrowser = require("@smithy/util-defaults-mode-browser");
var _regionConfigResolver = require("@aws-sdk/region-config-resolver");
var _protocolHttp = require("@smithy/protocol-http");
var _middlewareSerde = require("@smithy/middleware-serde");
var _types = require("@smithy/types");
var resolveClientEndpointParameters = options => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "awsssooidc"
  };
};
var package_default = {
  version: "3.429.0"
};
var s = "required";
var t = "fn";
var u = "argv";
var v = "ref";
var a = "isSet";
var b = "tree";
var c = "error";
var d = "endpoint";
var e = "PartitionResult";
var f = "getAttr";
var g = {
  [s]: false,
  type: "String"
};
var h = {
  [s]: true,
  default: false,
  type: "Boolean"
};
var i = {
  [v]: "Endpoint"
};
var j = {
  [t]: "booleanEquals",
  [u]: [{
    [v]: "UseFIPS"
  }, true]
};
var k = {
  [t]: "booleanEquals",
  [u]: [{
    [v]: "UseDualStack"
  }, true]
};
var l = {};
var m = {
  [t]: "booleanEquals",
  [u]: [true, {
    [t]: f,
    [u]: [{
      [v]: e
    }, "supportsFIPS"]
  }]
};
var n = {
  [v]: e
};
var o = {
  [t]: "booleanEquals",
  [u]: [true, {
    [t]: f,
    [u]: [n, "supportsDualStack"]
  }]
};
var p = [j];
var q = [k];
var r = [{
  [v]: "Region"
}];
var _data = {
  version: "1.0",
  parameters: {
    Region: g,
    UseDualStack: h,
    UseFIPS: h,
    Endpoint: g
  },
  rules: [{
    conditions: [{
      [t]: a,
      [u]: [i]
    }],
    type: b,
    rules: [{
      conditions: p,
      error: "Invalid Configuration: FIPS and custom endpoint are not supported",
      type: c
    }, {
      conditions: q,
      error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
      type: c
    }, {
      endpoint: {
        url: i,
        properties: l,
        headers: l
      },
      type: d
    }]
  }, {
    conditions: [{
      [t]: a,
      [u]: r
    }],
    type: b,
    rules: [{
      conditions: [{
        [t]: "aws.partition",
        [u]: r,
        assign: e
      }],
      type: b,
      rules: [{
        conditions: [j, k],
        type: b,
        rules: [{
          conditions: [m, o],
          type: b,
          rules: [{
            endpoint: {
              url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
              properties: l,
              headers: l
            },
            type: d
          }]
        }, {
          error: "FIPS and DualStack are enabled, but this partition does not support one or both",
          type: c
        }]
      }, {
        conditions: p,
        type: b,
        rules: [{
          conditions: [m],
          type: b,
          rules: [{
            conditions: [{
              [t]: "stringEquals",
              [u]: ["aws-us-gov", {
                [t]: f,
                [u]: [n, "name"]
              }]
            }],
            endpoint: {
              url: "https://oidc.{Region}.amazonaws.com",
              properties: l,
              headers: l
            },
            type: d
          }, {
            endpoint: {
              url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}",
              properties: l,
              headers: l
            },
            type: d
          }]
        }, {
          error: "FIPS is enabled but this partition does not support FIPS",
          type: c
        }]
      }, {
        conditions: q,
        type: b,
        rules: [{
          conditions: [o],
          type: b,
          rules: [{
            endpoint: {
              url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}",
              properties: l,
              headers: l
            },
            type: d
          }]
        }, {
          error: "DualStack is enabled but this partition does not support DualStack",
          type: c
        }]
      }, {
        endpoint: {
          url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}",
          properties: l,
          headers: l
        },
        type: d
      }]
    }]
  }, {
    error: "Invalid Configuration: Missing Region",
    type: c
  }]
};
var ruleSet = _data;
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return (0, _utilEndpoints.resolveEndpoint)(ruleSet, {
    endpointParams,
    logger: context.logger
  });
};
var getRuntimeConfig = config => ({
  apiVersion: "2019-06-10",
  base64Decoder: (config === null || config === void 0 ? void 0 : config.base64Decoder) ?? _utilBase.fromBase64,
  base64Encoder: (config === null || config === void 0 ? void 0 : config.base64Encoder) ?? _utilBase.toBase64,
  disableHostPrefix: (config === null || config === void 0 ? void 0 : config.disableHostPrefix) ?? false,
  endpointProvider: (config === null || config === void 0 ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
  extensions: (config === null || config === void 0 ? void 0 : config.extensions) ?? [],
  logger: (config === null || config === void 0 ? void 0 : config.logger) ?? new _smithyClient.NoOpLogger(),
  serviceId: (config === null || config === void 0 ? void 0 : config.serviceId) ?? "SSO OIDC",
  urlParser: (config === null || config === void 0 ? void 0 : config.urlParser) ?? _urlParser.parseUrl,
  utf8Decoder: (config === null || config === void 0 ? void 0 : config.utf8Decoder) ?? _utilUtf.fromUtf8,
  utf8Encoder: (config === null || config === void 0 ? void 0 : config.utf8Encoder) ?? _utilUtf.toUtf8
});
var getRuntimeConfig2 = config => {
  const defaultsMode = (0, _utilDefaultsModeBrowser.resolveDefaultsModeConfig)(config);
  const defaultConfigProvider = () => defaultsMode().then(_smithyClient.loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config === null || config === void 0 ? void 0 : config.bodyLengthChecker) ?? _utilBodyLengthBrowser.calculateBodyLength,
    defaultUserAgentProvider: (config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) ?? (0, _utilUserAgentBrowser.defaultUserAgent)({
      serviceId: clientSharedValues.serviceId,
      clientVersion: package_default.version
    }),
    maxAttempts: (config === null || config === void 0 ? void 0 : config.maxAttempts) ?? _utilRetry.DEFAULT_MAX_ATTEMPTS,
    region: (config === null || config === void 0 ? void 0 : config.region) ?? (0, _invalidDependency.invalidProvider)("Region is missing"),
    requestHandler: (config === null || config === void 0 ? void 0 : config.requestHandler) ?? new _fetchHttpHandler.FetchHttpHandler(defaultConfigProvider),
    retryMode: (config === null || config === void 0 ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || _utilRetry.DEFAULT_RETRY_MODE),
    sha256: (config === null || config === void 0 ? void 0 : config.sha256) ?? _sha256Browser.Sha256,
    streamCollector: (config === null || config === void 0 ? void 0 : config.streamCollector) ?? _fetchHttpHandler.streamCollector,
    useDualstackEndpoint: (config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(_configResolver.DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config === null || config === void 0 ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(_configResolver.DEFAULT_USE_FIPS_ENDPOINT))
  };
};
var asPartial = t2 => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, _regionConfigResolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, _smithyClient.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, _protocolHttp.getHttpHandlerExtensionConfiguration)(runtimeConfig))
  };
  extensions.forEach(extension => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, _regionConfigResolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, _smithyClient.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, _protocolHttp.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
  };
};
var SSOOIDCClient = class extends _smithyClient.Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, _configResolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, _middlewareEndpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, _middlewareRetry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, _middlewareHostHeader.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, _middlewareUserAgent.resolveUserAgentConfig)(_config_5);
    const _config_7 = resolveRuntimeExtensions(_config_6, (configuration === null || configuration === void 0 ? void 0 : configuration.extensions) || []);
    super(_config_7);
    this.config = _config_7;
    this.middlewareStack.use((0, _middlewareRetry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, _middlewareContentLength.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, _middlewareHostHeader.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, _middlewareLogger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, _middlewareRecursionDetection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, _middlewareUserAgent.getUserAgentPlugin)(this.config));
  }
  destroy() {
    super.destroy();
  }
};
exports.SSOOIDCClient = SSOOIDCClient;
var SSOOIDCServiceException = class _SSOOIDCServiceException extends _smithyClient.ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
  }
};
var AccessDeniedException = exports.AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    this.name = "AccessDeniedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var AuthorizationPendingException = exports.AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "AuthorizationPendingException",
      $fault: "client",
      ...opts
    });
    this.name = "AuthorizationPendingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var ExpiredTokenException = exports.ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "ExpiredTokenException",
      $fault: "client",
      ...opts
    });
    this.name = "ExpiredTokenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var InternalServerException = exports.InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var InvalidClientException = exports.InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "InvalidClientException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidClientException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidClientException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "InvalidGrantException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidGrantException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidGrantException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var InvalidRequestException = exports.InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "InvalidRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidRequestException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var InvalidScopeException = exports.InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "InvalidScopeException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidScopeException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidScopeException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var SlowDownException = exports.SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "SlowDownException",
      $fault: "client",
      ...opts
    });
    this.name = "SlowDownException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _SlowDownException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var UnauthorizedClientException = exports.UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "UnauthorizedClientException",
      $fault: "client",
      ...opts
    });
    this.name = "UnauthorizedClientException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var UnsupportedGrantTypeException = exports.UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "UnsupportedGrantTypeException",
      $fault: "client",
      ...opts
    });
    this.name = "UnsupportedGrantTypeException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException {
  constructor(opts) {
    super({
      name: "InvalidClientMetadataException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidClientMetadataException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
    this.error = opts.error;
    this.error_description = opts.error_description;
  }
};
var se_CreateTokenCommand = async (input, context) => {
  const {
    hostname,
    protocol = "https",
    port,
    path: basePath
  } = await context.endpoint();
  const headers = {
    "content-type": "application/json"
  };
  const resolvedPath = `${basePath !== null && basePath !== void 0 && basePath.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/token`;
  let body;
  body = JSON.stringify((0, _smithyClient.take)(input, {
    clientId: [],
    clientSecret: [],
    code: [],
    deviceCode: [],
    grantType: [],
    redirectUri: [],
    refreshToken: [],
    scope: _ => (0, _smithyClient._json)(_)
  }));
  return new _protocolHttp.HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};
var se_RegisterClientCommand = async (input, context) => {
  const {
    hostname,
    protocol = "https",
    port,
    path: basePath
  } = await context.endpoint();
  const headers = {
    "content-type": "application/json"
  };
  const resolvedPath = `${basePath !== null && basePath !== void 0 && basePath.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/client/register`;
  let body;
  body = JSON.stringify((0, _smithyClient.take)(input, {
    clientName: [],
    clientType: [],
    scopes: _ => (0, _smithyClient._json)(_)
  }));
  return new _protocolHttp.HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};
var se_StartDeviceAuthorizationCommand = async (input, context) => {
  const {
    hostname,
    protocol = "https",
    port,
    path: basePath
  } = await context.endpoint();
  const headers = {
    "content-type": "application/json"
  };
  const resolvedPath = `${basePath !== null && basePath !== void 0 && basePath.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
  let body;
  body = JSON.stringify((0, _smithyClient.take)(input, {
    clientId: [],
    clientSecret: [],
    startUrl: []
  }));
  return new _protocolHttp.HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};
var de_CreateTokenCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateTokenCommandError(output, context);
  }
  const contents = (0, _smithyClient.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, _smithyClient.take)(data, {
    accessToken: _smithyClient.expectString,
    expiresIn: _smithyClient.expectInt32,
    idToken: _smithyClient.expectString,
    refreshToken: _smithyClient.expectString,
    tokenType: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateTokenCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.ssooidc#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "AuthorizationPendingException":
    case "com.amazonaws.ssooidc#AuthorizationPendingException":
      throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
    case "ExpiredTokenException":
    case "com.amazonaws.ssooidc#ExpiredTokenException":
      throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.ssooidc#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "InvalidClientException":
    case "com.amazonaws.ssooidc#InvalidClientException":
      throw await de_InvalidClientExceptionRes(parsedOutput, context);
    case "InvalidGrantException":
    case "com.amazonaws.ssooidc#InvalidGrantException":
      throw await de_InvalidGrantExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.ssooidc#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "InvalidScopeException":
    case "com.amazonaws.ssooidc#InvalidScopeException":
      throw await de_InvalidScopeExceptionRes(parsedOutput, context);
    case "SlowDownException":
    case "com.amazonaws.ssooidc#SlowDownException":
      throw await de_SlowDownExceptionRes(parsedOutput, context);
    case "UnauthorizedClientException":
    case "com.amazonaws.ssooidc#UnauthorizedClientException":
      throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
    case "UnsupportedGrantTypeException":
    case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
      throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_RegisterClientCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RegisterClientCommandError(output, context);
  }
  const contents = (0, _smithyClient.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, _smithyClient.take)(data, {
    authorizationEndpoint: _smithyClient.expectString,
    clientId: _smithyClient.expectString,
    clientIdIssuedAt: _smithyClient.expectLong,
    clientSecret: _smithyClient.expectString,
    clientSecretExpiresAt: _smithyClient.expectLong,
    tokenEndpoint: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_RegisterClientCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.ssooidc#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "InvalidClientMetadataException":
    case "com.amazonaws.ssooidc#InvalidClientMetadataException":
      throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.ssooidc#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "InvalidScopeException":
    case "com.amazonaws.ssooidc#InvalidScopeException":
      throw await de_InvalidScopeExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_StartDeviceAuthorizationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_StartDeviceAuthorizationCommandError(output, context);
  }
  const contents = (0, _smithyClient.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, _smithyClient.take)(data, {
    deviceCode: _smithyClient.expectString,
    expiresIn: _smithyClient.expectInt32,
    interval: _smithyClient.expectInt32,
    userCode: _smithyClient.expectString,
    verificationUri: _smithyClient.expectString,
    verificationUriComplete: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_StartDeviceAuthorizationCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.ssooidc#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "InvalidClientException":
    case "com.amazonaws.ssooidc#InvalidClientException":
      throw await de_InvalidClientExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.ssooidc#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "SlowDownException":
    case "com.amazonaws.ssooidc#SlowDownException":
      throw await de_SlowDownExceptionRes(parsedOutput, context);
    case "UnauthorizedClientException":
    case "com.amazonaws.ssooidc#UnauthorizedClientException":
      throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var throwDefaultError = (0, _smithyClient.withBaseException)(SSOOIDCServiceException);
var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new AuthorizationPendingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new ExpiredTokenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_InternalServerExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidClientExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidClientException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidClientMetadataExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidClientMetadataException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidGrantException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidScopeException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_SlowDownExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new SlowDownException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new UnauthorizedClientException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
  const contents = (0, _smithyClient.map)({});
  const data = parsedOutput.body;
  const doc = (0, _smithyClient.take)(data, {
    error: _smithyClient.expectString,
    error_description: _smithyClient.expectString
  });
  Object.assign(contents, doc);
  const exception = new UnsupportedGrantTypeException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
var deserializeMetadata = output => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var collectBodyString = (streamBody, context) => (0, _smithyClient.collectBody)(streamBody, context).then(body => context.utf8Encoder(body));
var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
});
var parseErrorBody = async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
};
var loadRestJsonErrorCode = (output, data) => {
  const findKey = (object, key) => Object.keys(object).find(k2 => k2.toLowerCase() === key.toLowerCase());
  const sanitizeErrorCode = rawValue => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
};
var CreateTokenCommand = exports.CreateTokenCommand = class _CreateTokenCommand extends _smithyClient.Command {
  constructor(input) {
    super();
    this.input = input;
  }
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: {
        type: "builtInParams",
        name: "useFipsEndpoint"
      },
      Endpoint: {
        type: "builtInParams",
        name: "endpoint"
      },
      Region: {
        type: "builtInParams",
        name: "region"
      },
      UseDualStack: {
        type: "builtInParams",
        name: "useDualstackEndpoint"
      }
    };
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, _CreateTokenCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const {
      logger
    } = configuration;
    const clientName = "SSOOIDCClient";
    const commandName = "CreateTokenCommand";
    const handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: _ => _,
      outputFilterSensitiveLog: _ => _,
      [_types.SMITHY_CONTEXT_KEY]: {
        service: "AWSSSOOIDCService",
        operation: "CreateToken"
      }
    };
    const {
      requestHandler
    } = configuration;
    return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_CreateTokenCommand(input, context);
  }
  deserialize(output, context) {
    return de_CreateTokenCommand(output, context);
  }
};
var RegisterClientCommand = class _RegisterClientCommand extends _smithyClient.Command {
  constructor(input) {
    super();
    this.input = input;
  }
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: {
        type: "builtInParams",
        name: "useFipsEndpoint"
      },
      Endpoint: {
        type: "builtInParams",
        name: "endpoint"
      },
      Region: {
        type: "builtInParams",
        name: "region"
      },
      UseDualStack: {
        type: "builtInParams",
        name: "useDualstackEndpoint"
      }
    };
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, _RegisterClientCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const {
      logger
    } = configuration;
    const clientName = "SSOOIDCClient";
    const commandName = "RegisterClientCommand";
    const handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: _ => _,
      outputFilterSensitiveLog: _ => _,
      [_types.SMITHY_CONTEXT_KEY]: {
        service: "AWSSSOOIDCService",
        operation: "RegisterClient"
      }
    };
    const {
      requestHandler
    } = configuration;
    return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_RegisterClientCommand(input, context);
  }
  deserialize(output, context) {
    return de_RegisterClientCommand(output, context);
  }
};
var StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends _smithyClient.Command {
  constructor(input) {
    super();
    this.input = input;
  }
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: {
        type: "builtInParams",
        name: "useFipsEndpoint"
      },
      Endpoint: {
        type: "builtInParams",
        name: "endpoint"
      },
      Region: {
        type: "builtInParams",
        name: "region"
      },
      UseDualStack: {
        type: "builtInParams",
        name: "useDualstackEndpoint"
      }
    };
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, _StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const {
      logger
    } = configuration;
    const clientName = "SSOOIDCClient";
    const commandName = "StartDeviceAuthorizationCommand";
    const handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: _ => _,
      outputFilterSensitiveLog: _ => _,
      [_types.SMITHY_CONTEXT_KEY]: {
        service: "AWSSSOOIDCService",
        operation: "StartDeviceAuthorization"
      }
    };
    const {
      requestHandler
    } = configuration;
    return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_StartDeviceAuthorizationCommand(input, context);
  }
  deserialize(output, context) {
    return de_StartDeviceAuthorizationCommand(output, context);
  }
};
var commands = {
  CreateTokenCommand,
  RegisterClientCommand,
  StartDeviceAuthorizationCommand
};
var SSOOIDC = class extends SSOOIDCClient {};
(0, _smithyClient.createAggregatedClient)(commands, SSOOIDC);