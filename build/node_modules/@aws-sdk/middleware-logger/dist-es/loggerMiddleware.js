"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggerMiddlewareOptions = exports.loggerMiddleware = exports.getLoggerPlugin = void 0;
const loggerMiddleware = () => (next, context) => async args => {
  try {
    var _logger$info;
    const response = await next(args);
    const {
      clientName,
      commandName,
      logger,
      dynamoDbDocumentClientOptions = {}
    } = context;
    const {
      overrideInputFilterSensitiveLog,
      overrideOutputFilterSensitiveLog
    } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
    const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
    const {
      $metadata,
      ...outputWithoutMetadata
    } = response.output;
    logger === null || logger === void 0 || (_logger$info = logger.info) === null || _logger$info === void 0 || _logger$info.call(logger, {
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      output: outputFilterSensitiveLog(outputWithoutMetadata),
      metadata: $metadata
    });
    return response;
  } catch (error) {
    var _logger$error;
    const {
      clientName,
      commandName,
      logger,
      dynamoDbDocumentClientOptions = {}
    } = context;
    const {
      overrideInputFilterSensitiveLog
    } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
    logger === null || logger === void 0 || (_logger$error = logger.error) === null || _logger$error === void 0 || _logger$error.call(logger, {
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      error,
      metadata: error.$metadata
    });
    throw error;
  }
};
exports.loggerMiddleware = loggerMiddleware;
const loggerMiddlewareOptions = exports.loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
const getLoggerPlugin = options => ({
  applyToStack: clientStack => {
    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
  }
});
exports.getLoggerPlugin = getLoggerPlugin;