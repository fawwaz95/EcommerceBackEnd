"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recursionDetectionMiddleware = exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = void 0;
var _protocolHttp = require("@smithy/protocol-http");
const TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
const ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
const ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
const recursionDetectionMiddleware = options => next => async args => {
  const {
    request
  } = args;
  if (!_protocolHttp.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
    return next(args);
  }
  const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
  const traceId = process.env[ENV_TRACE_ID];
  const nonEmptyString = str => typeof str === "string" && str.length > 0;
  if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
    request.headers[TRACE_ID_HEADER_NAME] = traceId;
  }
  return next({
    ...args,
    request
  });
};
exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
const addRecursionDetectionMiddlewareOptions = exports.addRecursionDetectionMiddlewareOptions = {
  step: "build",
  tags: ["RECURSION_DETECTION"],
  name: "recursionDetectionMiddleware",
  override: true,
  priority: "low"
};
const getRecursionDetectionPlugin = options => ({
  applyToStack: clientStack => {
    clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
  }
});
exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;