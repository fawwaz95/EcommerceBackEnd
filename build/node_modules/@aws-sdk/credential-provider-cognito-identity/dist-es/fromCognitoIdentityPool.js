"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromCognitoIdentityPool = fromCognitoIdentityPool;
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _propertyProvider = require("@smithy/property-provider");
var _fromCognitoIdentity = require("./fromCognitoIdentity");
var _localStorage = require("./localStorage");
var _resolveLogins = require("./resolveLogins");
function fromCognitoIdentityPool({
  accountId,
  cache = (0, _localStorage.localStorage)(),
  client,
  customRoleArn,
  identityPoolId,
  logins,
  userIdentifier = !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : undefined
}) {
  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;
  let provider = async () => {
    let identityId = cacheKey && (await cache.getItem(cacheKey));
    if (!identityId) {
      const {
        IdentityId = throwOnMissingId()
      } = await client.send(new _clientCognitoIdentity.GetIdCommand({
        AccountId: accountId,
        IdentityPoolId: identityPoolId,
        Logins: logins ? await (0, _resolveLogins.resolveLogins)(logins) : undefined
      }));
      identityId = IdentityId;
      if (cacheKey) {
        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {});
      }
    }
    provider = (0, _fromCognitoIdentity.fromCognitoIdentity)({
      client,
      customRoleArn,
      logins,
      identityId
    });
    return provider();
  };
  return () => provider().catch(async err => {
    if (cacheKey) {
      Promise.resolve(cache.removeItem(cacheKey)).catch(() => {});
    }
    throw err;
  });
}
function throwOnMissingId() {
  throw new _propertyProvider.CredentialsProviderError("Response from Amazon Cognito contained no identity ID");
}